require_relative '../spec_helper'
require_relative '../../config/config'
require_relative '../../lib/webservice_clients/workflows/end_to_end_workflow'
require_relative '../../lib/webservice_clients/workflow_status_client'
require 'rspec'


RSpec.describe 'concurrency' do
  include Config::Logging
  CONCURRENCY_LEVEL=1

  before :each do
    @workflows_created = []
    @workflow_status_client = WorkflowStatusClient.new
    @total_workflows_before = @workflow_status_client.count_workflows_by_status('Completed')
    @ingestion_workflow_client = IngestWorkflow.new
    @publish_workflow_client = PublishWorkflow.new
    @project_workflow_client = ProjectWorkflow.new
  end

  it 'can create projects concurrently' do
    @expected_complete_workflows = CONCURRENCY_LEVEL
    CONCURRENCY_LEVEL.times do
      project_uuid = SecureRandom.uuid
      project_workflow = @project_workflow_client.create project_uuid
      retrieved_project_workflow = project_workflow.retrieve project_workflow.id
      @workflows_created << retrieved_project_workflow
    end
  end

  it 'can create ingestions concurrently' do
    @expected_complete_workflows = CONCURRENCY_LEVEL
    project_uuid = SecureRandom.uuid
    project = @project_workflow_client.create project_uuid
    expect(project.uuid.contains_uuid?).to be_truthy
    wait_for_complete project
    CONCURRENCY_LEVEL.times do
      ingest_workflow = @ingestion_workflow_client.create project_uuid
      retrieved_ingest_workflow = ingest_workflow.retrieve ingest_workflow.id
      @workflows_created << retrieved_ingest_workflow
    end
  end

  it 'can publish concurrently' do
    @expected_complete_workflows = CONCURRENCY_LEVEL
    project_uuid = SecureRandom.uuid
    project = @project_workflow_client.create project_uuid
    expect(project.uuid.contains_uuid?).to be_truthy
    CONCURRENCY_LEVEL.times do
      publish_workflow = @publish_workflow_client.create project_uuid
      retrieved_publish_workflow = publish_workflow.retrieve publish_workflow.id
      @workflows_created << retrieved_publish_workflow
    end
  end

  it 'can run concurrent end-to-end workflows' do
    #TODO too long. Refactor.
    @expected_complete_workflows = CONCURRENCY_LEVEL * 2
    project_uuid = SecureRandom.uuid
    project = @project_workflow_client.create project_uuid
    expect(project.uuid.contains_uuid?).to be_truthy
    CONCURRENCY_LEVEL.times do
      ingestion_workflow = @ingestion_workflow_client.create project_uuid
      retrieved_ingestion_workflow = ingestion_workflow.retrieve ingestion_workflow.id
      @workflows_created << retrieved_ingestion_workflow

      publish_workflow = @publish_workflow_client.create project_uuid
      retrieved_publish_workflow = publish_workflow.retrieve publish_workflow.id
      @workflows_created <<  retrieved_publish_workflow

      info_logger :info, """Stored workflow #{publish_workflow.id}
#{@workflows_created}"""

    end
  end

  after :each do
    #TODO far too long. Refactor.
    info_logger :info, "#{@workflows_created.length} workflows created. checking success."
    count = @workflows_created.length

    begin
      @workflows_created.each do |workflow|

     #LOG
      info_logger :info, """

      Workflows created. Waiting for workflow id #{workflow.id}

      """

      #Wait for next
      wait_for_complete workflow
      count = count - 1

      #LOG
      info_logger :info,<<WORKFLOW_COMPLETE_MESSAGE

      Workflow #{workflow} complete.
      #{count} Workflows remaining      

WORKFLOW_COMPLETE_MESSAGE

      end


    rescue Exception => e
      info_logger :info, """#{@total_workflows_after} Created.
"""
      raise e
    end

    @total_workflows_after = @workflow_status_client.count_workflows_by_status('Completed')
    expect(@total_workflows_after).to be >0
    info_logger :info, "Soak test complete. #{@workflows_created.length} complete of #{@expected_complete_workflows}"
    expect(@workflows_created.length).to eq @expected_complete_workflows
    expect(@total_workflows_after = (@total_workflows_before + @expected_complete_workflows))
    info_logger :info, <<RESULT

    TEST COMPLETE.
    **************
    TOTAL WORKFLOWS AT START:    #{@total_workflows_before}
    TOTAL WORKFLOWS AT END:      #{@total_workflows_after}
    WORKFLOWS GENERATED BY TEST: #{@workflows_created.length}
    EXPECTED COMPLETE WORKFLOWS: #{@expected_complete_workflows}

RESULT

  end

end
